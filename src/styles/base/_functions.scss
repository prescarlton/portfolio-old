@import './channel_values';

/// Incrementally lighten a color in a more effective way than with lighten()
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - Percentage of white in the returned color
/// @return {Color} - The lightened color
@function tint($color, $percentage) {
    @return mix(#fff, $color, $percentage);
}

/// Incrementally darken a color in a more effective way than with darken()
/// @param {Color} $color - Color to shade
/// @param {Number} $percentage - Percentage of black in the returned color
/// @return {Color} - The darkened color
@function shade($color, $percentage) {
    @return mix(#000, $color, $percentage);
}

/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
@function luminance($color) {
    $red: nth($linear-channel-values, red($color) + 1);
    $green: nth($linear-channel-values, green($color) + 1);
    $blue: nth($linear-channel-values, blue($color) + 1);

    @return .2126 * $red+.7152 * $green+.0722 * $blue;
}

/**
   * Calculate the contrast ratio between two colors.
   * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
   */
@function contrast($back, $front) {
    $backLum: luminance($back) + .05;
    $foreLum: luminance($front) + .05;

    @return max($backLum, $foreLum) / min($backLum, $foreLum);
}

/**
   * Determine whether to use dark or light text on top of given color.
   * Returns black for dark text and white for light text.
   */
@function choose-contrast-color($color) {
    $lightContrast: contrast($color, white);
    $darkContrast: contrast($color, black);

    @if ($lightContrast > $darkContrast) {
        @return white;
    }

    @else {
        @return black;
    }
}